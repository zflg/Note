import{ab as d,H as t,I as o,F as e,V as a,O as c,ad as n,Y as i}from"./framework-6d9bedb0.js";const r={},l=n('<h2 id="值类型" tabindex="-1"><a class="header-anchor" href="#值类型" aria-hidden="true">#</a> 值类型</h2><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><ul><li>bool</li></ul><h3 id="整数" tabindex="-1"><a class="header-anchor" href="#整数" aria-hidden="true">#</a> 整数</h3><ul><li>int 可以是int8到int256，int相当于其中的int256</li><li>uint 可以是uint8到uint256，int相当于其中的uint256</li></ul><h4 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h4><p>对数字的二进制补码表示执行位运算，如<code>~int256(0) == int256(-1)</code>;</p><h4 id="移位" tabindex="-1"><a class="header-anchor" href="#移位" aria-hidden="true">#</a> 移位</h4><p>移位符号右边的数必须是无符号类型，有符号会产生编译错误</p><ul><li><code>x &lt;&lt; y</code>相当于<code>x * 2**y</code></li><li><code>x &gt;&gt; y</code>相当于<code>x / 2**y</code></li></ul><h4 id="加减乘" tabindex="-1"><a class="header-anchor" href="#加减乘" aria-hidden="true">#</a> 加减乘</h4>',11),p={href:"https://docs.soliditylang.org/en/latest/control-structures.html#unchecked",target:"_blank",rel:"noopener noreferrer"},h=n(`<h4 id="除" tabindex="-1"><a class="header-anchor" href="#除" aria-hidden="true">#</a> 除</h4><p>和众多语言一样，<code>int(-5) / int(2) = int(-2)</code>。</p><h4 id="模" tabindex="-1"><a class="header-anchor" href="#模" aria-hidden="true">#</a> 模</h4><ul><li><code>int256(5) % int256(2) == int256(1)</code></li><li><code>int256(5) % int256(-2) == int256(1)</code></li><li><code>int256(-5) % int256(2) == int256(-1)</code></li><li><code>int256(-5) % int256(-2) == int256(-1)</code></li></ul><h4 id="幂" tabindex="-1"><a class="header-anchor" href="#幂" aria-hidden="true">#</a> 幂</h4><ul><li><code>0 ** 0 = 1</code></li><li><code>x*x*x</code>比<code>x ** 3</code>更Cheaper</li></ul><h3 id="定点数" tabindex="-1"><a class="header-anchor" href="#定点数" aria-hidden="true">#</a> 定点数</h3><p>Solidity 尚未完全支持定点数。它们可以声明，但不能分配给或分配自。</p><h3 id="地址" tabindex="-1"><a class="header-anchor" href="#地址" aria-hidden="true">#</a> 地址</h3><ul><li><code>address</code> 包含一个20Byte的值（以太坊地址的大小）</li><li><code>address payable</code> 与address相同，但是由额外成员transfer和send</li></ul><p>区别是，<code>address payable</code>是一个你可以将以太币发送到的地址，而你不应该将以太币发送到一个普通地址<code>address</code>，因为它可能是一个不是为接受以太币而构建的智能合约。</p><p><code>address payable</code>可以隐式转换为<code>address</code>，但是<code>address</code>必须通过<code>payadble(&lt;address&gt;)</code>才可以转化为<code>address payable</code>。</p><h4 id="balance和transfer和send" tabindex="-1"><a class="header-anchor" href="#balance和transfer和send" aria-hidden="true">#</a> <code>balance</code>和<code>transfer</code>和<code>send</code></h4><p>可以使用<code>balance</code>查询地址的余额，并使用<code>transfer</code>函数将以太币（以wei为单位）发送到支付地址:</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token builtin">address</span> <span class="token keyword">payable</span> x <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span><span class="token number">0x123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">address</span> myAddress <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>balance <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> myAddress<span class="token punctuation">.</span>balance <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> x<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>transfer</code>如果当前合约余额不足或者接受账户拒绝，则<code>transfer</code>函数在失败时恢复。 <code>send</code>是低级的<code>transfer</code>，执行失败不会异常停止，而是返回false。</p>`,16);function u(k,b){const s=i("ExternalLinkIcon");return t(),o("div",null,[l,e("p",null,[a("默认会检查所有算术是否溢出，但可以使用"),e("a",p,[a("unchecked block"),c(s)]),a("禁用，")]),h])}const x=d(r,[["render",u],["__file","day4.html.vue"]]);export{x as default};
