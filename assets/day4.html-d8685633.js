import{ab as p,H as o,I as c,F as s,V as n,O as e,ad as t,Y as i}from"./framework-6d9bedb0.js";const l={},u=t('<h2 id="值类型" tabindex="-1"><a class="header-anchor" href="#值类型" aria-hidden="true">#</a> 值类型</h2><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><ul><li>bool</li></ul><h3 id="整数" tabindex="-1"><a class="header-anchor" href="#整数" aria-hidden="true">#</a> 整数</h3><ul><li>int 可以是int8到int256，int相当于其中的int256</li><li>uint 可以是uint8到uint256，int相当于其中的uint256</li></ul><h4 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h4><p>对数字的二进制补码表示执行位运算，如<code>~int256(0) == int256(-1)</code>;</p><h4 id="移位" tabindex="-1"><a class="header-anchor" href="#移位" aria-hidden="true">#</a> 移位</h4><p>移位符号右边的数必须是无符号类型，有符号会产生编译错误</p><ul><li><code>x &lt;&lt; y</code>相当于<code>x * 2**y</code></li><li><code>x &gt;&gt; y</code>相当于<code>x / 2**y</code></li></ul><h4 id="加减乘" tabindex="-1"><a class="header-anchor" href="#加减乘" aria-hidden="true">#</a> 加减乘</h4>',11),d={href:"https://docs.soliditylang.org/en/latest/control-structures.html#unchecked",target:"_blank",rel:"noopener noreferrer"},r=t(`<h4 id="除" tabindex="-1"><a class="header-anchor" href="#除" aria-hidden="true">#</a> 除</h4><p>和众多语言一样，<code>int(-5) / int(2) = int(-2)</code>。</p><h4 id="模" tabindex="-1"><a class="header-anchor" href="#模" aria-hidden="true">#</a> 模</h4><ul><li><code>int256(5) % int256(2) == int256(1)</code></li><li><code>int256(5) % int256(-2) == int256(1)</code></li><li><code>int256(-5) % int256(2) == int256(-1)</code></li><li><code>int256(-5) % int256(-2) == int256(-1)</code></li></ul><h4 id="幂" tabindex="-1"><a class="header-anchor" href="#幂" aria-hidden="true">#</a> 幂</h4><ul><li><code>0 ** 0 = 1</code></li><li><code>x*x*x</code>比<code>x ** 3</code>更Cheaper</li></ul><h3 id="定点数" tabindex="-1"><a class="header-anchor" href="#定点数" aria-hidden="true">#</a> 定点数</h3><p>Solidity 尚未完全支持定点数。它们可以声明，但不能分配给或分配自。</p><h3 id="地址" tabindex="-1"><a class="header-anchor" href="#地址" aria-hidden="true">#</a> 地址</h3><ul><li><code>address</code> 包含一个20Byte的值（以太坊地址的大小）</li><li><code>address payable</code> 与address相同，但是由额外成员transfer和send</li></ul><p>区别是，<code>address payable</code>是一个你可以将以太币发送到的地址，而你不应该将以太币发送到一个普通地址<code>address</code>，因为它可能是一个不是为接受以太币而构建的智能合约。</p><p><code>address payable</code>可以隐式转换为<code>address</code>，但是<code>address</code>必须通过<code>payadble(&lt;address&gt;)</code>才可以转化为<code>address payable</code>。</p><h4 id="balance和transfer和send" tabindex="-1"><a class="header-anchor" href="#balance和transfer和send" aria-hidden="true">#</a> <code>balance</code>和<code>transfer</code>和<code>send</code></h4><p>可以使用<code>balance</code>查询地址的余额，并使用<code>transfer</code>函数将以太币（以wei为单位）发送到支付地址:</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token builtin">address</span> <span class="token keyword">payable</span> x <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span><span class="token number">0x123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">address</span> myAddress <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>balance <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> myAddress<span class="token punctuation">.</span>balance <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> x<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>transfer</code>如果当前合约余额不足或者接受账户拒绝，则<code>transfer</code>函数在失败时恢复。 <code>send</code>是低级的<code>transfer</code>，执行失败不会异常停止，而是返回false。</p><h4 id="call-delegatecall和staticcall" tabindex="-1"><a class="header-anchor" href="#call-delegatecall和staticcall" aria-hidden="true">#</a> <code>call</code>,<code>delegatecall</code>和<code>staticcall</code></h4><p>暂不了解，低级函数，只能作为最后手段，因为破坏了solidity的安全性。</p><h4 id="code和codehash" tabindex="-1"><a class="header-anchor" href="#code和codehash" aria-hidden="true">#</a> <code>code</code>和<code>codehash</code></h4><p>你可以查询任何智能合约的已部署代码。使用<code>.code</code>获取EVM字节码作为<code>bytes memory</code>,这可能会是空。使用<code>codehash</code>获取到Keccak-256哈希。<code>addr.codehash</code>比<code>keccak256(addr.code)</code>更cheaper。</p><h3 id="合约类型" tabindex="-1"><a class="header-anchor" href="#合约类型" aria-hidden="true">#</a> 合约类型</h3>`,21),k=s("li",null,[n("每个合约都定义了自己的类型。您可以隐式地将合同转换为它们继承自的合同。合同可以显式转换为类型或从"),s("code",null,"address"),n("类型转换。")],-1),v=s("code",null,"address payable",-1),b=s("code",null,"address(x)",-1),m=s("code",null,"payable(address(x))",-1),h={href:"https://docs.soliditylang.org/en/latest/types.html#address",target:"_blank",rel:"noopener noreferrer"},y=s("li",null,[n("如果您声明一个合约类型"),s("code",null,"MyContract c"),n("的局部变量，您可以调用该合约的函数。注意从具有相同合同类型的地方分配它。")],-1),f={href:"https://docs.soliditylang.org/en/latest/control-structures.html#creating-contracts",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"address",-1),x={href:"https://docs.soliditylang.org/en/latest/abi-spec.html#abi",target:"_blank",rel:"noopener noreferrer"},g=s("li",null,"合同不支持任何的operators",-1),_=s("li",null,[n("合约类型的成员是合约的外部函数，包括任何标记为"),s("code",null,"public"),n("的状态变量。")],-1),q=s("code",null,"C",-1),F=s("code",null,"type(C)",-1),U={href:"https://docs.soliditylang.org/en/latest/units-and-global-variables.html#meta-type",target:"_blank",rel:"noopener noreferrer"},N=t(`<h3 id="固定大小字节数组" tabindex="-1"><a class="header-anchor" href="#固定大小字节数组" aria-hidden="true">#</a> 固定大小字节数组</h3><p>值类型<code>bytes1</code>, <code>bytes2</code>, <code>bytes3</code>, …<code>bytes32</code> 包含从1到最多32的字节序列。类型<code>bytes1[]</code>是一个字节数组，但由于填充规则，它为每个元素浪费了31个字节的空间（存储中除外）。最好改用<code>bytes</code>类型。<code>.length</code>是字节数组的固定长度（ready-only）。</p><h3 id="动态大小的字节数组" tabindex="-1"><a class="header-anchor" href="#动态大小的字节数组" aria-hidden="true">#</a> 动态大小的字节数组</h3><ul><li>bytes 动态大小的字节数组</li><li>string 动态大小的UTF-8编码的string。</li></ul><h3 id="地址字面量" tabindex="-1"><a class="header-anchor" href="#地址字面量" aria-hidden="true">#</a> 地址字面量</h3><p>例如，通过地址校验和测试的十六进制字面量<code>0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF</code>是<code>address</code>类型。长度在39到 41位之间且未通过校验和测试的十六进制字面量会产生错误。您可以在前面（对于整数类型）或附加（对于 bytesNN 类型）零来消除错误。</p><h3 id="有理数和整数字面量" tabindex="-1"><a class="header-anchor" href="#有理数和整数字面量" aria-hidden="true">#</a> 有理数和整数字面量</h3><ul><li>不存在八进制，存在10进制和16进制，如<code>100</code>,<code>0x64</code></li><li><code>.1</code>和<code>1.3</code>有效，<code>1.</code>无效</li><li>科学技术法有效，形式如<code>MeE</code>相当于<code>M * 10**E</code>。如<code>2e10</code>, <code>-2e10</code>, <code>2e-10</code>, <code>2.5e1</code></li><li>可以<code>_</code>分割提高可读性，如<code>123_000</code>, <code>0x2efff_abde</code></li></ul><p>数字字面量表达式保留任意精度，直到它们被转换为非字面量类型（即通过将它们与数字字面量表达式（如布尔字面量）以外的任何内容一起使用或通过显式转换）。这意味着计算不会溢出并且除法不会在数字字面量表达式中截断。如<code>(2**800 + 1) - 2**800</code>结果为常量<code>1</code>，尽管中间产生了一个超字长的中间值。此外<code>.5 * 8</code>的结果是整数<code>4</code>尽管中间使用了非整数。</p><p>只要操作数是整数，任何可以应用于整数的运算符也可以应用于数字字面量表达式。如果两者中的任何一个是小数，则不允许进行位运算，并且如果指数是小数则不允许求幂（因为这可能会导致非有理数）。</p><h3 id="字符串字面量和类型" tabindex="-1"><a class="header-anchor" href="#字符串字面量和类型" aria-hidden="true">#</a> 字符串字面量和类型</h3><p>字符串可以用双引号或者单引号书写（<code>&quot;foo&quot;</code>or<code>&#39;bar&#39;</code>），并且可以被分割成多个部分（<code>&quot;foo&quot;&quot;bar&quot;</code>相当于<code>&quot;foobar&quot;</code>），这在处理长字符串的时候会很有用。没有0尾随，，如<code>&quot;foo&quot;</code>是3个字节而不是4。和整数字元一样。他们可以变换，但是他们可以隐式的转换为<code>bytes1</code>...<code>bytes32</code>，如果合适则可以转换为<code>bytes</code>和<code>string</code></p><p>字符串字面量只能包含可打印的 ASCII 字符，这意味着介于 0x20 .. 0x7E 之间并包括在内的字符。</p><p>字符串字面量支持转义字符，<code>\\xNN</code>采用十六进制值并插入适当的字节，同时<code>\\uNNNN</code>采用Unicode代码点并插入UTF-8序列。</p><h3 id="unicode字面量" tabindex="-1"><a class="header-anchor" href="#unicode字面量" aria-hidden="true">#</a> unicode字面量</h3><p>虽然常规字符串字面量只能包含ASCII，但Unicode字面量（以关键字为前缀unicode）可以包含任何有效的UTF-8序列。它们还支持与常规字符串字面量完全相同的转义序列。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token builtin">string</span> <span class="token keyword">memory</span> a <span class="token operator">=</span> unicode<span class="token string">&quot;Hello ð&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="十六进制字面量" tabindex="-1"><a class="header-anchor" href="#十六进制字面量" aria-hidden="true">#</a> 十六进制字面量</h3><ul><li><code>hex&quot;001122FF&quot;</code>相当于<code>hex&quot;0011_22_ff&quot;</code></li><li><code>hex&quot;00112233&quot; hex&quot;44556677&quot;</code>相当于<code>hex&quot;0011223344556677&quot;</code></li></ul><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h3><p>枚举是在 Solidity 中创建用户定义类型的一种方式。它们可以显式转换为所有整数类型，但不允许隐式转换。从整数的显式转换会在运行时检查值是否位于枚举范围内，否则会导致 Panic 错误。枚举至少需要一个成员，声明时的默认值是第一个成员。枚举不能超过 256 个成员。</p><p>使用<code>type(NameOfEnum).min</code>和<code>type(NameOfEnum).max</code>可以获得给定枚举的最小值和最大值。</p><h3 id="用户定义的值类型" tabindex="-1"><a class="header-anchor" href="#用户定义的值类型" aria-hidden="true">#</a> 用户定义的值类型</h3><p>用户定义的值类型允许在基本值类型上创建零成本抽象。这类似于别名，但具有更严格的类型要求。</p><p>该类型没有任何运算符或附加的成员函数。特别是，连运算符都<code>==</code>没有定义。不允许与其他类型进行显式和隐式转换</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.8</span><span class="token punctuation">;</span>

<span class="token comment">// Represent a 18 decimal, 256 bit wide fixed point type using a user-defined value type.</span>
type UFixed256x18 <span class="token keyword">is</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>

<span class="token comment">/// A minimal library to do fixed point operations on UFixed256x18.</span>
<span class="token keyword">library</span> <span class="token class-name">FixedMath</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> <span class="token keyword">constant</span> multiplier <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">18</span><span class="token punctuation">;</span>

    <span class="token comment">/// Adds two UFixed256x18 numbers. Reverts on overflow, relying on checked</span>
    <span class="token comment">/// arithmetic on uint256.</span>
    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>UFixed256x18 a<span class="token punctuation">,</span> UFixed256x18 b<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span>UFixed256x18<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> UFixed256x18<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>UFixed256x18<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> UFixed256x18<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/// Multiplies UFixed256x18 and uint256. Reverts on overflow, relying on checked</span>
    <span class="token comment">/// arithmetic on uint256.</span>
    <span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span>UFixed256x18 a<span class="token punctuation">,</span> <span class="token builtin">uint256</span> b<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span>UFixed256x18<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> UFixed256x18<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>UFixed256x18<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/// Take the floor of a UFixed256x18 number.</span>
    <span class="token comment">/// @return the largest integer that does not exceed \`a\`.</span>
    <span class="token keyword">function</span> <span class="token function">floor</span><span class="token punctuation">(</span>UFixed256x18 a<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> UFixed256x18<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> multiplier<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/// Turns a uint256 into a UFixed256x18 of the same value.</span>
    <span class="token comment">/// Reverts if the integer is too large.</span>
    <span class="token keyword">function</span> <span class="token function">toUFixed256x18</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> a<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span>UFixed256x18<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> UFixed256x18<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>a <span class="token operator">*</span> multiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><p>函数表示为：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>parameter types<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">internal</span><span class="token operator">|</span><span class="token keyword">external</span><span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token keyword">pure</span><span class="token operator">|</span><span class="token keyword">view</span><span class="token operator">|</span><span class="token keyword">payable</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">return</span> types<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>与参数类型相反，返回类型不能为空 - 如果函数类型不应返回任何内容，整个<code>returns (&lt;return types&gt;)</code>部分需要省略。</li><li>默认情况下，函数类型是内部的，内部函数只能在当前合约内部调用，因此<code>internal</code>关键字可以省略。请注意，这仅适用于函数类型。必须为合约中定义的函数明确指定可见性，它们没有默认值。</li><li>转换（没理解这里的转换什么意思） <ul><li><code>pure</code>函数可以转换为<code>view</code>和<code>non-payable</code>函数</li><li><code>view</code>函数可以转换为<code>non-payable</code>函数</li><li><code>payable</code>函数可以转换为<code>non-payable</code>函数</li></ul></li><li>成员 <ul><li><code>.address</code>返回函数合约的地址</li><li><code>.selector</code>返回ABI函数选择器</li></ul></li></ul><p>例子： 如何使用成员</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.6.4</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token builtin">address</span> <span class="token operator">==</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>f<span class="token punctuation">.</span>selector<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>f<span class="token punctuation">{</span>gas<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何使用内部函数类型</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">library</span> <span class="token class-name">ArrayUtils</span> <span class="token punctuation">{</span>
    <span class="token comment">// internal functions can be used in internal library functions because</span>
    <span class="token comment">// they will be part of the same code context</span>
    <span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> self<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> f<span class="token punctuation">)</span>
        <span class="token keyword">internal</span>
        <span class="token keyword">pure</span>
        <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">reduce</span><span class="token punctuation">(</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> self<span class="token punctuation">,</span>
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">,</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> f
    <span class="token punctuation">)</span>
        <span class="token keyword">internal</span>
        <span class="token keyword">pure</span>
        <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        r <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> self<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token builtin">uint</span> length<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">contract</span> <span class="token class-name">Pyramid</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name">ArrayUtils</span> <span class="token keyword">for</span> <span class="token operator">*</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">pyramid</span><span class="token punctuation">(</span><span class="token builtin">uint</span> l<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x<span class="token punctuation">,</span> <span class="token builtin">uint</span> y<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何使用外部函数类型</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.22</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Oracle</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
        <span class="token builtin">bytes</span> data<span class="token punctuation">;</span>
        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">external</span> callback<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Request<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">private</span> requests<span class="token punctuation">;</span>
    <span class="token keyword">event</span> <span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> data<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">external</span> callback<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Request</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">emit</span> <span class="token function">NewRequest</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">reply</span><span class="token punctuation">(</span><span class="token builtin">uint</span> requestID<span class="token punctuation">,</span> <span class="token builtin">uint</span> response<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// Here goes the check that the reply comes from a trusted source</span>
        requests<span class="token punctuation">[</span>requestID<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">OracleUser</span> <span class="token punctuation">{</span>
    Oracle <span class="token keyword">constant</span> <span class="token keyword">private</span> ORACLE_CONST <span class="token operator">=</span> <span class="token function">Oracle</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0x00000000219ab540356cBB839Cbe05303d7705Fa</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// known contract</span>
    <span class="token builtin">uint</span> <span class="token keyword">private</span> exchangeRate<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">buySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        ORACLE_CONST<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;USD&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oracleResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">oracleResponse</span><span class="token punctuation">(</span><span class="token builtin">uint</span> response<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>
            msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> <span class="token builtin">address</span><span class="token punctuation">(</span>ORACLE_CONST<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Only oracle can call this.&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        exchangeRate <span class="token operator">=</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function C(A,R){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("默认会检查所有算术是否溢出，但可以使用"),s("a",d,[n("unchecked block"),e(a)]),n("禁用，")]),r,s("ul",null,[k,s("li",null,[n("仅当合同类型具有接收或应付回退功能时，才可能进行"),v,n("类型的显式转换。转换使用"),b,n("。如果不具有接收或应付回退功能则使用"),m,n("。更多信息可以参见"),s("a",h,[n("address type"),e(a)])]),y,s("li",null,[n("您还可以实例化合约（这意味着它们是新创建的）。详情参见'"),s("a",f,[n("Contracts via new"),e(a)]),n("'")]),s("li",null,[n("合同的数据表示和"),w,n("类型相同，而且这种类型一样可以用到"),s("a",x,[n("ABI"),e(a)]),n("中")]),g,_,s("li",null,[n("对于合同"),q,n("，你可以使用"),F,n("来访问合约相关的"),s("a",U,[n("type information"),e(a)])])]),N])}const E=p(l,[["render",C],["__file","day4.html.vue"]]);export{E as default};
