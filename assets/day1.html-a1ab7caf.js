import{ab as n,H as s,I as a,ad as t}from"./framework-6d9bedb0.js";const e={},p=t(`<h2 id="一个简单的智能合约" tabindex="-1"><a class="header-anchor" href="#一个简单的智能合约" aria-hidden="true">#</a> 一个简单的智能合约</h2><h3 id="存储示例" tabindex="-1"><a class="header-anchor" href="#存储示例" aria-hidden="true">#</a> 存储示例</h3><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">SimpleStorage</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> storedData<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        storedData <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> storedData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以观察一下大概的结构：</p><ul><li>版本许可GLPL3.0</li><li>指定编译版本</li><li>代码正文</li></ul><p>Solidity意义上的合约是驻留在以太坊区块链上的特定地址的代码和数据集合。该示例申明了unit的状态变量，可以通过get和set查询和更改。</p><h3 id="子货币示例" tabindex="-1"><a class="header-anchor" href="#子货币示例" aria-hidden="true">#</a> 子货币示例</h3><p>以上合约没有施加访问限制，现在的示例施加的访问限制示只允许合约的创建者创建新币。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.4</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Coin</span> <span class="token punctuation">{</span>
    <span class="token comment">// The keyword &quot;public&quot; makes variables</span>
    <span class="token comment">// accessible from other contracts</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> minter<span class="token punctuation">;</span>
    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>

    <span class="token comment">// Events allow clients to react to specific</span>
    <span class="token comment">// contract changes you declare</span>
    <span class="token keyword">event</span> <span class="token function">Sent</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Constructor code is only run when the contract</span>
    <span class="token comment">// is created</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        minter <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Sends an amount of newly created coins to an address</span>
    <span class="token comment">// Can only be called by the contract creator</span>
    <span class="token keyword">function</span> <span class="token function">mint</span><span class="token punctuation">(</span><span class="token builtin">address</span> receiver<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> minter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        balances<span class="token punctuation">[</span>receiver<span class="token punctuation">]</span> <span class="token operator">+=</span> amount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Errors allow you to provide information about</span>
    <span class="token comment">// why an operation failed. They are returned</span>
    <span class="token comment">// to the caller of the function.</span>
    error <span class="token function">InsufficientBalance</span><span class="token punctuation">(</span><span class="token builtin">uint</span> requested<span class="token punctuation">,</span> <span class="token builtin">uint</span> available<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Sends an amount of existing coins</span>
    <span class="token comment">// from any caller to an address</span>
    <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token builtin">address</span> receiver<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">revert</span> <span class="token function">InsufficientBalance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                requested<span class="token punctuation">:</span> amount<span class="token punctuation">,</span>
                available<span class="token punctuation">:</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> amount<span class="token punctuation">;</span>
        balances<span class="token punctuation">[</span>receiver<span class="token punctuation">]</span> <span class="token operator">+=</span> amount<span class="token punctuation">;</span>
        <span class="token keyword">emit</span> <span class="token function">Sent</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="minter变量-address类型" tabindex="-1"><a class="header-anchor" href="#minter变量-address类型" aria-hidden="true">#</a> minter变量（address类型）</h4><p>address类型的变量示一个160bit值并且不允许修改，适用于存储合约地址，或者示外部账户的公钥哈希。而public修饰会自动生成一个函数，并允许从合约外部访问这个值。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">minter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> minter<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="balances变量-mapping类型" tabindex="-1"><a class="header-anchor" href="#balances变量-mapping类型" aria-hidden="true">#</a> balances变量（mapping类型）</h4><p><code>mapping(address =&gt; uint) public balances;</code>也创建了一个mapping的类型将地址映射到unsigned integers。 mapping可以看作一个key-to-value的hash表。而public同样暴露给外部账户一个函数</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">balances</span><span class="token punctuation">(</span><span class="token builtin">address</span> account<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> balances<span class="token punctuation">[</span>account<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="event事件" tabindex="-1"><a class="header-anchor" href="#event事件" aria-hidden="true">#</a> event事件</h4><p><code>event Sent(address from, address to, uint amount);</code>声明了一个事件，一旦发出。则以太坊客户端就可以侦听这些事件。可以使用JS代码，web3.js创建Coin合约对象，任何外界用户都会调用balances上自动生成的函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Coin<span class="token punctuation">.</span><span class="token function">Sent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Coin transfer: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>amount <span class="token operator">+</span>
            <span class="token string">&quot; coins were sent from &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>from <span class="token operator">+</span>
            <span class="token string">&quot; to &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>to <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Balances now:\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;Sender: &quot;</span> <span class="token operator">+</span> Coin<span class="token punctuation">.</span><span class="token function">balances</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>from<span class="token punctuation">)</span> <span class="token operator">+</span>
            <span class="token string">&quot;Receiver: &quot;</span> <span class="token operator">+</span> Coin<span class="token punctuation">.</span><span class="token function">balances</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h4><p><code>constructor() { minter = msg.sender; }</code>，在合约创建过程执行，之后无法调用。之后永久储存合同人的地址。其中<code>msg</code>（<code>tx</code>和<code>block</code>也是）是一个特殊全局变量，其中可以渠道访问区块链的属性。msg.sender始终都是当前（外部）函数调用的来源地之。</p><h4 id="mint函数" tabindex="-1"><a class="header-anchor" href="#mint函数" aria-hidden="true">#</a> mint函数</h4><p>根据之前的constructor函数，则该合约的创建者地址记录在了minter变量当中，调用mint其中<code>require(msg.sender == minter)</code>，表示当前mint函数的调用地址必须等于合约的创建地址。这里balances有个溢出的默认check算法，balances是unit的映射，如果unit值在操作中溢出<code>&gt;2^256 -1</code>则也会回滚事务。这里的逻辑我理解相当于铸币。</p><h4 id="send函数" tabindex="-1"><a class="header-anchor" href="#send函数" aria-hidden="true">#</a> send函数</h4><p>首先，由于没有检查，所以所有人都可以调用这个方法（我理解是这是转调用者自己的钱给别人，当然所有人都可以调用这个方法）。但是check了需要send的amount是否大于当前调用者的余额，真则revert操作，<code>InsufficientBalance</code>相当于抛错。</p>`,24),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","day1.html.vue"]]);export{r as default};
