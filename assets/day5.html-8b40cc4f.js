import{ab as n,H as s,I as a,ad as t}from"./framework-6d9bedb0.js";const e={},p=t(`<h2 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h2><p>引用类型包括结构、数组和映射。如果使用引用类型，必须显示的提供储存类型的数据区：</p><ul><li>memory 其神明周期仅限于外部函数调用</li><li>storage 储存状态变量的位置，生命周期仅限于合约的声明周期</li><li>calldata 是一个不可修改的、非持久性的区域，函数参数存储在其中，其行为主要类似于内存</li></ul><p>更改数据位置的分配或类型转换将始终引发自动复制操作，而同一数据位置内的分配在某些情况下仅复制存储类型。</p><h3 id="数据位置和分配行为" tabindex="-1"><a class="header-anchor" href="#数据位置和分配行为" aria-hidden="true">#</a> 数据位置和分配行为</h3><p>数据位置不仅与数据的持久性相关，而且与分配的语义相关：</p><ul><li><code>storage</code>和<code>memory</code>（或来自<code>calldata</code>）之间的分配总是创建一个独立的副本。</li><li>从<code>memory</code>到<code>memory</code>的赋值仅创建引用。这意味着对一个内存变量的更改在引用相同数据的所有其他内存变量中也是可见的。</li><li><code>storage</code>对本地存储变量的赋值也只分配一个引用。</li><li>始终复制所有其他分配<code>storage</code>。这种情况的示例是对状态变量或存储结构类型的局部变量成员的赋值，即使局部变量本身只是一个引用。</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.5.0</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token comment">// The data location of x is storage.</span>
    <span class="token comment">// This is the only place where the</span>
    <span class="token comment">// data location can be omitted.</span>
    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">;</span>

    <span class="token comment">// The data location of memoryArray is memory.</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> memoryArray<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        x <span class="token operator">=</span> memoryArray<span class="token punctuation">;</span> <span class="token comment">// works, copies the whole array to storage</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">storage</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// works, assigns a pointer, data location of y is storage</span>
        y<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// fine, returns the 8th element</span>
        y<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fine, modifies x through y</span>
        <span class="token keyword">delete</span> x<span class="token punctuation">;</span> <span class="token comment">// fine, clears the array, also modifies y</span>
        <span class="token comment">// The following does not work; it would need to create a new temporary /</span>
        <span class="token comment">// unnamed array in storage, but storage is &quot;statically&quot; allocated:</span>
        <span class="token comment">// y = memoryArray;</span>
        <span class="token comment">// Similarly, &quot;delete y&quot; is not valid, as assignments to local variables</span>
        <span class="token comment">// referencing storage objects can only be made from existing storage objects.</span>
        <span class="token comment">// It would &quot;reset&quot; the pointer, but there is no sensible location it could point to.</span>
        <span class="token comment">// For more details see the documentation of the &quot;delete&quot; operator.</span>
        <span class="token comment">// delete y;</span>
        <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calls g, handing over a reference to x</span>
        <span class="token function">h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calls h and creates an independent, temporary copy in memory</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">storage</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><ul><li>固定k大小的数组写为<code>T[k]</code>，动态大小的数组写为<code>T[]</code>。</li><li>访问超出其末尾的数组会导致断言失败。方法<code>.push()</code>和<code>.push(value)</code>可用于在动态大小数组的末尾追加一个新元素，其中<code>.push()</code>追加一个零初始化元素并返回对其的引用。</li><li>动态大小的数组只能在存储中调整大小。在内存中，这样的数组可以是任意大小，但一旦分配了数组，就不能更改大小。</li></ul><h4 id="bytes-and-string-as-arrays" tabindex="-1"><a class="header-anchor" href="#bytes-and-string-as-arrays" aria-hidden="true">#</a> bytes and string as Arrays</h4><p><code>bytes</code>和<code>string</code>类型的变量是特殊数组。类型<code>bytes</code>类似于<code>bytes1[]</code>，但它在<code>calldata</code>和<code>memory</code>中被紧紧地打包。<code>string</code>等于<code>bytes</code>但不允许长度或索引访问。</p><p>Solidity没有stringd的操作函数，但是有第三方的string包，你可以使用<code>keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2))</code>判断两个<code>string</code>相等，使用<code>string.concat(s1, s2)\`\`链接两个string</code></p><p><code>bytes</code>比<code>bytes1[]</code>更cheaper，因为<code>bytes1[]</code>在<code>memory</code>中会添加31个填充字节，但在<code>storage</code>中不会填充。</p><h4 id="the-functions-bytes-concat-and-string-concat" tabindex="-1"><a class="header-anchor" href="#the-functions-bytes-concat-and-string-concat" aria-hidden="true">#</a> The functions bytes.concat and string.concat</h4><p>可以使用<code>string.concat</code>连接任意数量的<code>string</code>。这个方法返回一个<code>string memory</code>数组并且不被填充。</p><p>类似的，<code>bytes.concat</code>函数可以连接任意数量的<code>bytes</code>。</p><p>例：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.12</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> s <span class="token operator">=</span> <span class="token string">&quot;Storage&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">calldata</span> bc<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> sm<span class="token punctuation">,</span> <span class="token builtin">bytes16</span> b<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token punctuation">{</span>
        <span class="token builtin">string</span> <span class="token keyword">memory</span> concatString <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">(</span>bc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Literal&quot;</span><span class="token punctuation">,</span> sm<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">+</span> bc<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>concatString<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> concatBytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> bc<span class="token punctuation">,</span> bc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;Literal&quot;</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">+</span> bc<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">+</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> concatBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="allocating-memory-arrays" tabindex="-1"><a class="header-anchor" href="#allocating-memory-arrays" aria-hidden="true">#</a> Allocating Memory Arrays</h4><p>具有动态长度的内存数组可以使用<code>new</code>操作符来创建。与存储数组不同的是，不可能调整内存数组的大小（例如，不能使用<code>.push</code>成员函数）。你必须事先计算出所需的大小，或者创建一个新的内存数组并复制每个元素。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">uint</span> len<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bytes</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="array-literals" tabindex="-1"><a class="header-anchor" href="#array-literals" aria-hidden="true">#</a> Array Literals</h4><p>数组的基本类型是列表中第一个表达式的类型，这样所有其他表达式都可以隐式转换为它。如果这不可能，则为类型错误。</p><p>在下面的例子中，<code>[1, 2, 3]</code>的类型是<code>uint8[3]</code>内存，因为这些常数的类型都是<code>uint8</code>。如果你希望结果是<code>uint[3]</code>内存类型，你需要将第一个元素转换为<code>uint</code>。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span>
        <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组字面量<code>[1, -1]</code>是无效的，因为第一个表达式的类型是<code>uint8</code>，而第二个表达式的类型是<code>int8</code>，它们不能互相隐式转换。例如，为了使其工作，你可以使用<code>[int8(1), -1]</code>。</p><p>由于不同类型的固定大小的内存数组不能相互转换（即使基本类型可以），如果你想使用二维数组字面，你总是必须明确指定一个共同的基本类型：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint24</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint24</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">uint24</span><span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">uint24</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">uint24</span><span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// The following does not work, because some of the inner arrays are not of the right type.</span>
        <span class="token comment">// uint[2][4] memory x = [[0x1, 1], [0xffffff, 2], [0xff, 3], [0xffff, 4]];</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>固定大小的内存数组不能分配给动态大小的内存数组，也就是说，以下情况是不可能的：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.0</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token comment">// This will not compile.</span>
<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// The next line creates a type error because uint[3] memory</span>
        <span class="token comment">// cannot be converted to uint[] memory.</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计划在将来取消这一限制，但由于ABI中数组的传递方式，它产生了一些复杂的问题。</p><p>如果你想初始化动态大小的数组，你必须分配各个元素：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="array-members" tabindex="-1"><a class="header-anchor" href="#array-members" aria-hidden="true">#</a> Array Members</h4><ul><li>length: 数组有一个<code>length</code>成员，包含它们的元素数量。一旦它们被创建,内存数组的长度是固定的（但也是动态的，即它可以取决于运行时参数）。</li><li>push(): 动态存储数组和字节（不是字符串）有一个叫做<code>push()</code>的成员函数，你可以用它来在数组的末端追加一个零初始化的元素。它返回一个对该元素的引用，因此可以像<code>x.push().t=2</code>或<code>x.push()=b</code>那样使用它。</li><li>push(x): 动态存储数组和字节（不是字符串）有一个叫做<code>push(x)</code>的成员函数，你可以用它来在数组的末端追加一个给定的元素。该函数不返回任何东西。</li><li>pop(): 动态存储数组和字节（不是字符串）有一个叫做<code>pop()</code>的成员函数，你可以用它来从数组的末端移除一个元素。这也隐含地对被移除的元素调用<code>delete</code>。该函数不返回任何东西。</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.6.0</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">ArrayContract</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">20</span><span class="token punctuation">]</span> aLotOfIntegers<span class="token punctuation">;</span>
    <span class="token comment">// Note that the following is not a pair of dynamic arrays but a</span>
    <span class="token comment">// dynamic array of pairs (i.e. of fixed size arrays of length two).</span>
    <span class="token comment">// In Solidity, T[k] and T[] are always arrays with elements of type T,</span>
    <span class="token comment">// even if T itself is an array.</span>
    <span class="token comment">// Because of that, bool[2][] is a dynamic array of elements</span>
    <span class="token comment">// that are bool[2]. This is different from other languages, like C.</span>
    <span class="token comment">// Data location for all state variables is storage.</span>
    <span class="token builtin">bool</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pairsOfFlags<span class="token punctuation">;</span>

    <span class="token comment">// newPairs is stored in memory - the only possibility</span>
    <span class="token comment">// for public contract function arguments</span>
    <span class="token keyword">function</span> <span class="token function">setAllFlagPairs</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> newPairs<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// assignment to a storage array performs a copy of \`\`newPairs\`\` and</span>
        <span class="token comment">// replaces the complete array \`\`pairsOfFlags\`\`.</span>
        pairsOfFlags <span class="token operator">=</span> newPairs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">struct</span> <span class="token class-name">StructType</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contents<span class="token punctuation">;</span>
        <span class="token builtin">uint</span> moreInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    StructType s<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> c<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// stores a reference to \`\`s\`\` in \`\`g\`\`</span>
        StructType <span class="token keyword">storage</span> g <span class="token operator">=</span> s<span class="token punctuation">;</span>
        <span class="token comment">// also changes \`\`s.moreInfo\`\`.</span>
        g<span class="token punctuation">.</span>moreInfo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">// assigns a copy because \`\`g.contents\`\`</span>
        <span class="token comment">// is not a local variable, but a member of</span>
        <span class="token comment">// a local variable.</span>
        g<span class="token punctuation">.</span>contents <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">setFlagPair</span><span class="token punctuation">(</span><span class="token builtin">uint</span> index<span class="token punctuation">,</span> <span class="token builtin">bool</span> flagA<span class="token punctuation">,</span> <span class="token builtin">bool</span> flagB<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// access to a non-existing index will throw an exception</span>
        pairsOfFlags<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> flagA<span class="token punctuation">;</span>
        pairsOfFlags<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> flagB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">changeFlagArraySize</span><span class="token punctuation">(</span><span class="token builtin">uint</span> newSize<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// using push and pop is the only way to change the</span>
        <span class="token comment">// length of an array</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newSize <span class="token operator">&lt;</span> pairsOfFlags<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>pairsOfFlags<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> newSize<span class="token punctuation">)</span>
                pairsOfFlags<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newSize <span class="token operator">&gt;</span> pairsOfFlags<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>pairsOfFlags<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> newSize<span class="token punctuation">)</span>
                pairsOfFlags<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// these clear the arrays completely</span>
        <span class="token keyword">delete</span> pairsOfFlags<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> aLotOfIntegers<span class="token punctuation">;</span>
        <span class="token comment">// identical effect here</span>
        pairsOfFlags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bool</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token builtin">bytes</span> byteData<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">byteArrays</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> data<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// byte arrays (&quot;bytes&quot;) are different as they are stored without padding,</span>
        <span class="token comment">// but can be treated identical to &quot;uint8[]&quot;</span>
        byteData <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            byteData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteData<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> byteData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">addFlag</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> flag<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pairsOfFlags<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> pairsOfFlags<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">createMemoryArray</span><span class="token punctuation">(</span><span class="token builtin">uint</span> size<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Dynamic memory arrays are created using \`new\`:</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> arrayOfPairs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Inline arrays are always statically-sized and if you only</span>
        <span class="token comment">// use literals, you have to provide at least one type.</span>
        arrayOfPairs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// Create a dynamic byte array:</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bytes</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">bytes1</span><span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dangling-references-to-storage-array-elements-悬挂引用" tabindex="-1"><a class="header-anchor" href="#dangling-references-to-storage-array-elements-悬挂引用" aria-hidden="true">#</a> Dangling References to Storage Array Elements(悬挂引用)</h4><p>使用存储阵列时，您需要注意避免悬挂引用。悬空引用是指向不再存在或已移动但未更新引用的引用。例如，如果将对数组元素的引用存储在局部变量中，然后.pop()从包含的数组中存储，则可能会出现悬挂引用：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.8.0</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// Stores a pointer to the last array element of s.</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">storage</span> ptr <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// Removes the last array element of s.</span>
        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Writes to the array element that is no longer within the array.</span>
        ptr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0x42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Adding a new element to \`\`s\`\` now will not add an empty array, but</span>
        <span class="token comment">// will result in an array of length 1 with \`\`0x42\`\` as element.</span>
        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写入<code>ptr.push(0x42)</code>将不会恢复，尽管事实上<code>ptr</code>不再引用<code>s</code>的有效元素。由于编译器假定未使用的存储始终为零，因此后续<code>s.push()</code>不会显式地将零写入存储，所以在<code>push()</code>之后<code>s</code>的最后一个元素将有长度<code>1</code>并且包含<code>0x42</code>作为其第一元素。</p>`,41),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","day5.html.vue"]]);export{r as default};
